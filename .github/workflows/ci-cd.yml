name: Ordo App CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '20.x'
  JAVA_VERSION: '17'
  ANDROID_API_LEVEL: 34
  ANDROID_BUILD_TOOLS_VERSION: 34.0.0
  REACT_NATIVE_VERSION: 0.74.x

jobs:
  # 品質チェック・リンティング・型チェック
  quality-check:
    name: 🔍 Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'OrdoApp/package-lock.json'

      - name: 🏗️ Install dependencies
        working-directory: ./OrdoApp
        run: |
          npm ci --legacy-peer-deps
          npm audit --audit-level=moderate || true

      - name: 🧹 ESLint Check
        working-directory: ./OrdoApp
        run: |
          npm run lint:check || {
            echo "ESLint found issues. Running fix..."
            npm run lint:fix
            echo "ESLint fixes applied. Please review changes."
          }

      - name: 🎨 Prettier Check
        working-directory: ./OrdoApp
        run: |
          npm run format:check || {
            echo "Prettier found formatting issues. Running fix..."
            npm run format:fix
            echo "Prettier fixes applied. Please review changes."
          }

      - name: 🔧 TypeScript Check
        working-directory: ./OrdoApp
        run: npm run type-check

      - name: 📊 Bundle Analyzer
        working-directory: ./OrdoApp
        run: |
          if [ -f "package.json" ] && grep -q '"analyze"' package.json; then
            npm run analyze
          else
            echo "Bundle analyzer not configured. Skipping..."
          fi

      - name: 📋 Generate Quality Report
        working-directory: ./OrdoApp
        run: |
          echo "# Quality Check Report" > quality-report.md
          echo "## Generated on: $(date)" >> quality-report.md
          echo "" >> quality-report.md
          
          echo "### ESLint Results" >> quality-report.md
          npm run lint:check > lint-results.txt || true
          if [ -s lint-results.txt ]; then
            echo "\`\`\`" >> quality-report.md
            cat lint-results.txt >> quality-report.md
            echo "\`\`\`" >> quality-report.md
          else
            echo "✅ No ESLint issues found" >> quality-report.md
          fi
          echo "" >> quality-report.md
          
          echo "### TypeScript Results" >> quality-report.md
          npm run type-check > ts-results.txt || true
          if [ -s ts-results.txt ]; then
            echo "\`\`\`" >> quality-report.md
            cat ts-results.txt >> quality-report.md
            echo "\`\`\`" >> quality-report.md
          else
            echo "✅ No TypeScript issues found" >> quality-report.md
          fi

      - name: 📤 Upload Quality Report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: OrdoApp/quality-report.md
          retention-days: 30

  # セキュリティスキャン
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'OrdoApp/package-lock.json'

      - name: 🏗️ Install dependencies
        working-directory: ./OrdoApp
        run: npm ci --legacy-peer-deps

      - name: 🔍 npm audit
        working-directory: ./OrdoApp
        run: |
          npm audit --audit-level=high --json > audit-results.json || true
          cat audit-results.json

      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config-file: ./.github/codeql/codeql-config.yml

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      - name: 📊 Security Report
        working-directory: ./OrdoApp
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "## Generated on: $(date)" >> security-report.md
          echo "" >> security-report.md
          
          echo "### npm audit Results" >> security-report.md
          if [ -f "audit-results.json" ]; then
            echo "\`\`\`json" >> security-report.md
            cat audit-results.json >> security-report.md
            echo "\`\`\`" >> security-report.md
          else
            echo "✅ No npm audit issues found" >> security-report.md
          fi

      - name: 📤 Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: OrdoApp/security-report.md
          retention-days: 30

  # テスト実行
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality-check]
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'OrdoApp/package-lock.json'

      - name: 🏗️ Install dependencies
        working-directory: ./OrdoApp
        run: npm ci --legacy-peer-deps

      - name: 🧪 Run ${{ matrix.test-type }} tests
        working-directory: ./OrdoApp
        run: |
          case "${{ matrix.test-type }}" in
            unit)
              npm run test:unit -- --coverage --ci --watchAll=false --passWithNoTests
              ;;
            integration)
              npm run test:integration -- --ci --watchAll=false --passWithNoTests || echo "Integration tests not configured"
              ;;
            e2e)
              npm run test:e2e -- --headless || echo "E2E tests not configured"
              ;;
          esac

      - name: 📊 Upload Test Coverage
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./OrdoApp/coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📤 Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            OrdoApp/coverage/
            OrdoApp/test-results/
            OrdoApp/jest-results.json
          retention-days: 30

  # Android ビルド
  build-android:
    name: 🤖 Android Build
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [quality-check, security-scan]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    strategy:
      matrix:
        build-type: [debug, release]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'OrdoApp/package-lock.json'

      - name: ☕ Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: 🏗️ Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: ${{ env.ANDROID_API_LEVEL }}
          build-tools: ${{ env.ANDROID_BUILD_TOOLS_VERSION }}

      - name: 🏗️ Install dependencies
        working-directory: ./OrdoApp
        run: npm ci --legacy-peer-deps

      - name: 🔧 Metro Cache Clear
        working-directory: ./OrdoApp
        run: npx react-native start --reset-cache & sleep 5 && kill %1

      - name: 🛠️ Build Android ${{ matrix.build-type }}
        working-directory: ./OrdoApp
        run: |
          cd android
          if [ "${{ matrix.build-type }}" = "release" ]; then
            # Release build
            ./gradlew assembleRelease -x test -x lint --stacktrace
          else
            # Debug build
            ./gradlew assembleDebug -x test -x lint --stacktrace
          fi

      - name: 📦 Sign APK (Release only)
        if: matrix.build-type == 'release'
        working-directory: ./OrdoApp/android
        run: |
          # APK signing would go here
          echo "APK signing skipped - configure with your signing keys"

      - name: 📤 Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ matrix.build-type }}
          path: |
            OrdoApp/android/app/build/outputs/apk/**/*.apk
          retention-days: 30

      - name: 📋 Build Summary
        run: |
          echo "## Android Build Summary (${{ matrix.build-type }})" >> $GITHUB_STEP_SUMMARY
          echo "- Build Type: ${{ matrix.build-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- API Level: ${{ env.ANDROID_API_LEVEL }}" >> $GITHUB_STEP_SUMMARY
          echo "- Java Version: ${{ env.JAVA_VERSION }}" >> $GITHUB_STEP_SUMMARY
          if [ -f "OrdoApp/android/app/build/outputs/apk/debug/app-debug.apk" ] || [ -f "OrdoApp/android/app/build/outputs/apk/release/app-release.apk" ]; then
            echo "- Status: ✅ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Status: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi

  # iOS ビルド (macOS runner required)
  build-ios:
    name: 🍎 iOS Build
    runs-on: macos-latest
    timeout-minutes: 60
    needs: [quality-check, security-scan]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    strategy:
      matrix:
        build-type: [debug, release]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'OrdoApp/package-lock.json'

      - name: 🍎 Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: 🏗️ Install dependencies
        working-directory: ./OrdoApp
        run: npm ci --legacy-peer-deps

      - name: 📦 Install CocoaPods
        working-directory: ./OrdoApp/ios
        run: |
          sudo gem install cocoapods
          pod install --repo-update

      - name: 🛠️ Build iOS ${{ matrix.build-type }}
        working-directory: ./OrdoApp
        run: |
          if [ "${{ matrix.build-type }}" = "release" ]; then
            # Release build
            npx react-native build-ios --mode Release
          else
            # Debug build
            npx react-native build-ios --mode Debug
          fi

      - name: 📦 Archive iOS App (Release only)
        if: matrix.build-type == 'release'
        working-directory: ./OrdoApp/ios
        run: |
          xcodebuild -workspace OrdoApp.xcworkspace \
                     -scheme OrdoApp \
                     -configuration Release \
                     -destination generic/platform=iOS \
                     -archivePath OrdoApp.xcarchive \
                     archive

      - name: 📤 Upload iOS Build
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-${{ matrix.build-type }}
          path: |
            OrdoApp/ios/build/
            OrdoApp/ios/*.xcarchive
          retention-days: 30

      - name: 📋 Build Summary
        run: |
          echo "## iOS Build Summary (${{ matrix.build-type }})" >> $GITHUB_STEP_SUMMARY
          echo "- Build Type: ${{ matrix.build-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- Xcode Version: $(xcodebuild -version | head -n 1)" >> $GITHUB_STEP_SUMMARY
          echo "- Status: ✅ Success" >> $GITHUB_STEP_SUMMARY

  # デプロイメント
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test, build-android, build-ios]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    environment:
      name: production
      url: https://github.com/${{ github.repository }}/releases/latest
    
    steps:
      - name: 📥 Download Android APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk-release
          path: ./artifacts/android/

      - name: 📥 Download iOS Build
        uses: actions/download-artifact@v4
        with:
          name: ios-build-release
          path: ./artifacts/ios/

      - name: 📱 Deploy to App Stores
        run: |
          echo "🤖 Android deployment steps would go here"
          echo "🍎 iOS deployment steps would go here"
          echo "📊 Analytics setup would go here"
          
          # Example: Deploy to Google Play (requires setup)
          # fastlane android deploy
          
          # Example: Deploy to App Store (requires setup)
          # fastlane ios deploy

      - name: 📋 Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Release Tag: ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Release Name: ${{ github.event.release.name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Android APK: ✅ Available" >> $GITHUB_STEP_SUMMARY
          echo "- iOS Build: ✅ Available" >> $GITHUB_STEP_SUMMARY
          echo "- Status: 🚀 Deployed" >> $GITHUB_STEP_SUMMARY

  # 通知
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan, test, build-android, build-ios]
    if: always()
    
    steps:
      - name: 📊 Collect Job Results
        run: |
          echo "Quality Check: ${{ needs.quality-check.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Android Build: ${{ needs.build-android.result }}"
          echo "iOS Build: ${{ needs.build-ios.result }}"

      - name: 📢 Success Notification
        if: >
          needs.quality-check.result == 'success' &&
          needs.security-scan.result == 'success' &&
          needs.test.result == 'success'
        run: |
          echo "🎉 Pipeline succeeded!"
          # Slack/Discord notification would go here

      - name: 📢 Failure Notification
        if: >
          needs.quality-check.result == 'failure' ||
          needs.security-scan.result == 'failure' ||
          needs.test.result == 'failure' ||
          needs.build-android.result == 'failure' ||
          needs.build-ios.result == 'failure'
        run: |
          echo "❌ Pipeline failed!"
          # Slack/Discord notification would go here
