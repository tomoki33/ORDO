#!/usr/bin/env node/** * GitHub Projects 自動セットアップスクリプト * - リポジトリにワークフローファイルをコミット * - プロジェクト URL を自動取得・更新 */const { Octokit } = require('@octokit/rest');const fs = require('fs').promises;const path = require('path');const CONFIG = {  owner: 'tomoki33',  repo: 'ORDO',  token: process.env.GITHUB_TOKEN};// GitHub APIクライアントの初期化const octokit = new Octokit({  auth: process.env.GITHUB_TOKEN});async function setupGitHubActions() {  try {    console.log('🚀 GitHub Actions ワークフロー設定開始...');        // ワークフローファイルの一覧    const workflowFiles = [      '.github/workflows/add-to-project.yml',      '.github/workflows/project-automation.yml',       '.github/workflows/smart-project.yml',      '.github/workflows/README.md'    ];        // 各ファイルをリポジトリにコミット    for (const filePath of workflowFiles) {      const localPath = path.join('/Users/tomoki33/Desktop/Ordo', filePath);            try {        const content = await fs.readFile(localPath, 'utf8');        const contentEncoded = Buffer.from(content).toString('base64');                await octokit.rest.repos.createOrUpdateFileContents({          owner: CONFIG.owner,          repo: CONFIG.repo,          path: filePath,          message: `Add GitHub Actions: ${path.basename(filePath)}`,          content: contentEncoded        });                console.log(`✅ ${filePath} をコミットしました`);      } catch (error) {        console.error(`❌ ${filePath} のコミットに失敗:`, error.message);      }    }        console.log('\n🎊 GitHub Actions セットアップ完了！');    console.log('\n📋 次のステップ:');    console.log('1. Personal Access Token を project 権限で作成');    console.log('2. Repository Settings → Secrets → ADD_TO_PROJECT_PAT を追加');    console.log('3. GitHub Projects を作成して URL を更新');    console.log('4. カスタムフィールド (Priority, Epic, Size) を設定');      } catch (error) {    console.error('❌ セットアップエラー:', error.message);  }}// プロジェクト URL を取得する関数async function getProjectUrl() {  try {    // ユーザーのプロジェクト一覧を取得    const response = await octokit.graphql(`      query($login: String!) {        user(login: $login) {          projectsV2(first: 10) {            nodes {              id              title              url              number            }          }        }      }    `, {      login: CONFIG.owner    });        const projects = response.user.projectsV2.nodes;    console.log('📋 利用可能なプロジェクト:');    projects.forEach(project => {      console.log(`- ${project.title}: ${project.url}`);    });      } catch (error) {    console.error('❌ プロジェクト取得エラー:', error.message);    console.log('💡 手動でプロジェクト URL を確認してください');  }}async function main() {  if (!CONFIG.token) {    console.error('⚠️  環境変数の設定が必要です:');    console.error('export GITHUB_TOKEN="your_token_here"');    process.exit(1);  }    await setupGitHubActions();
  console.log('\n🔍 プロジェクト URL を取得中...');
  await getProjectUrl();
}

main();
